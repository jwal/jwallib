# Copyright 2011 James Ascroft-Leigh

"""\
%prog [options] [JSON_CONFIG]
"""

import json
import optparse
import subprocess
import sys

DEFAULT_CONFIG = {
        "mirror": "http://archive.ubuntu.com/ubuntu",
        "distribution": "natty",
        "components": [
                "main",
                "universe",
                "restricted",
                # "multiverse",
            ],
        "prefixes": [
                "deb",
                "deb-src",
            ],
        "extensions": [
                "",
                "-security",
                "-updates",
                # "-proposed",
                # "-backports",
            ],
    }

def fix_newlines(data):
    if "\r" not in data:
        data = data.replace("\n", "\r\n")
    return data

def pretty_print_json(json_data):
    return fix_newlines(
        json.dumps(json.loads(json_data),
                   indent=2, separators=(", ", ": ")))

def render_to_sources_list(config):
    mirror = config["mirror"]
    assert " " not in mirror, repr(mirror)
    distribution = config["distribution"]
    assert " " not in distribution, repr(distribution)
    results = []
    for prefix in sorted(config["prefixes"]):
        assert " " not in prefix, repr(prefix)
        for component in sorted(config["components"]):
            assert " " not in component, repr(component)
            for extension in sorted(config["extensions"]):
                assert " " not in extension, repr(extension)
                results.append("%(prefix)s %(mirror)s "
                               "%(distribution)s%(extension)s "
                               "%(component)s" % locals())
    message = """\
## This file is automatically generated using the following configuration:
"""
    header = "".join("# %s\r\n" % (l,) for l in 
                     pretty_print_json(json.dumps(config)).split("\r\n"))
    body = "".join("%s\r\n" % (l,) for l in results)
    assert len(results) == len(set(results)), results
    return message + header + body

def main(argv):
    parser = optparse.OptionParser(__doc__)
    parser.add_option("--install", dest="do_install",
                      default=False, action="store_true")
    parser.add_option("--skip-proxy-install", dest="do_proxy_install",
                      default=True, action="store_false")
    parser.add_option("--skip-blank-sources-list-install", dest="do_blank",
                      default=True, action="store_false")
    parser.add_option("--proxy", dest="proxy", 
                      default="http://ubuntu.devel.cmedltd.com:3128/")
    parser.add_option("--no-proxy", dest="proxy", action="store_const",
                      const=None)
    parser.add_option("--proxy-basename", dest="proxy_basename",
                      default="02-generated-proxy")
    parser.add_option("--basename", dest="basename", default="generated")
    options, args = parser.parse_args(argv)
    custom_json = json.dumps({})
    if len(args) > 0:
        custom_json = args.pop(0)
    if len(args) > 0:
        parser.error("Unexpected: %r" % (args,))
    default_json = json.dumps(DEFAULT_CONFIG)
    defaults = json.loads(default_json)
    custom = json.loads(custom_json)
    for key, value in defaults.items():
        custom.setdefault(key, value)
    output = render_to_sources_list(custom)
    if options.do_install:
        assert "\0" not in options.basename and "/" not in options.basename,\
            repr(options.basename)
        file_data = {
            "/etc/apt/sources.list.d/%s.list" % (options.basename,): output}
        if options.do_blank:
            file_data["/etc/apt/sources.list"] = """\
## File intentionally blank; see /etc/apt/sources.list.d/*.list\r\n\
"""
        if options.do_proxy_install:
            if options.proxy is None:
                proxy_data = "# No proxy\r\n"
            else:
                assert '"' not in options.proxy, repr(options.proxy)
                proxy_data = ('Acquire::HTTP::Proxy::"%s";\r\n'
                              % (options.proxy,))
            assert ("\0" not in options.proxy_basename 
                    and "/" not in options.proxy_basename), \
                    repr(options.proxy_basename)
            file_data["/etc/apt/apt.conf.d/%s" % (options.proxy_basename,)] = \
                proxy_data
        child = subprocess.Popen(["sudo", "python", "-c", """\
assert __name__ == "__main__"
import sys
assert len(sys.argv) == 1
import json
file_data = json.loads(sys.stdin.read())
for file_path, data in sorted(file_data.items()):
    fh = open(file_path, "wb")
    try:
        fh.write(data)
    finally:
        fh.close()
"""], stdin=subprocess.PIPE)
        child.communicate(json.dumps(file_data))
        assert child.returncode == 0, child.returncode
    sys.stdout.write(output)

if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
